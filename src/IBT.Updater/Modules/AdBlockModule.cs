using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using System.Reflection;
using Module = IBT.Updater.Interfaces.Module;
using IBT.Updater.Helpers;
using System.Diagnostics;

namespace IBT.Updater.Modules
{
    [Interfaces.Action("Preventing Ads")]
    internal class AdBlockModule:Module
    {
        private const string Start = "# [Start of entries generated by MVPS HOSTS]";
        private const string End = "# [end of entries generated by MVPS HOSTS]";

        internal override async Task<bool> OnAfterUpdate(SafeDictionary<string, object> keys)
        {
            if (Debugger.IsAttached) return true;
            string hostsEntries = null;
            try
            {
                hostsEntries = File.ReadAllText(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location) +
                                                 "/AdBlock/hosts.txt");
            } catch { }
            try
            {
                hostsEntries = Start + Environment.NewLine + (await ServerRequestHelper.GetObjectFromServerAsync<string>(keys["hospitalserver"].ToString(),
                            "get_hosts_modifications/")).Result + Environment.NewLine + End;
               
            }
            catch { }
            if (hostsEntries == null) return true;
            try
            {

                ReportProgress("Updating domains...");
                using (
                    var sr =
                        new StreamReader(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.System),
                            "drivers/etc/hosts")))
                {
                    var hosts = await sr.ReadToEndAsync();
                    sr.Close();
                    var index = hosts.IndexOf(Start, StringComparison.InvariantCulture);
                    if (index >= 0)
                    {
                        var endIndex = hosts.IndexOf(End, index, StringComparison.InvariantCulture);
                        hosts = hosts.Remove(index, endIndex + End.Length- index);
                    }
                    using (
                        var sw =
                            new StreamWriter(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.System),
                                "drivers/etc/hosts")))
                    {
                        if (hosts.EndsWith(Environment.NewLine))
                            await sw.WriteAsync(hosts);
                        else await sw.WriteLineAsync(hosts);
                        await sw.WriteLineAsync(hostsEntries);
                    }
                }
            }
            catch
            {
                
            }
            return true;

        }
    }
}
